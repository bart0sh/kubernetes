/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// AttributeValueApplyConfiguration represents an declarative configuration of the AttributeValue type for use
// with apply.
type AttributeValueApplyConfiguration struct {
	QuantityValue    *resource.Quantity             `json:"quantityValue,omitempty"`
	BoolValue        *bool                          `json:"boolValue,omitempty"`
	IntValue         *int64                         `json:"intValue,omitempty"`
	IntSliceValue    *Int64SliceApplyConfiguration  `json:"intSliceValue,omitempty"`
	StringValue      *string                        `json:"stringValue,omitempty"`
	StringSliceValue *StringSliceApplyConfiguration `json:"stringSliceValue,omitempty"`
}

// AttributeValueApplyConfiguration constructs an declarative configuration of the AttributeValue type for use with
// apply.
func AttributeValue() *AttributeValueApplyConfiguration {
	return &AttributeValueApplyConfiguration{}
}

// WithQuantityValue sets the QuantityValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the QuantityValue field is set to the value of the last call.
func (b *AttributeValueApplyConfiguration) WithQuantityValue(value resource.Quantity) *AttributeValueApplyConfiguration {
	b.QuantityValue = &value
	return b
}

// WithBoolValue sets the BoolValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BoolValue field is set to the value of the last call.
func (b *AttributeValueApplyConfiguration) WithBoolValue(value bool) *AttributeValueApplyConfiguration {
	b.BoolValue = &value
	return b
}

// WithIntValue sets the IntValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IntValue field is set to the value of the last call.
func (b *AttributeValueApplyConfiguration) WithIntValue(value int64) *AttributeValueApplyConfiguration {
	b.IntValue = &value
	return b
}

// WithIntSliceValue sets the IntSliceValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IntSliceValue field is set to the value of the last call.
func (b *AttributeValueApplyConfiguration) WithIntSliceValue(value *Int64SliceApplyConfiguration) *AttributeValueApplyConfiguration {
	b.IntSliceValue = value
	return b
}

// WithStringValue sets the StringValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StringValue field is set to the value of the last call.
func (b *AttributeValueApplyConfiguration) WithStringValue(value string) *AttributeValueApplyConfiguration {
	b.StringValue = &value
	return b
}

// WithStringSliceValue sets the StringSliceValue field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StringSliceValue field is set to the value of the last call.
func (b *AttributeValueApplyConfiguration) WithStringSliceValue(value *StringSliceApplyConfiguration) *AttributeValueApplyConfiguration {
	b.StringSliceValue = value
	return b
}
