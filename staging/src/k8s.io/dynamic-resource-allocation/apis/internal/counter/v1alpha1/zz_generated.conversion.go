//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types "k8s.io/apimachinery/pkg/types"
	v1alpha1 "k8s.io/dynamic-resource-allocation/apis/counter/v1alpha1"
	counter "k8s.io/dynamic-resource-allocation/apis/internal/counter"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*v1alpha1.AllocationResult)(nil), (*counter.AllocationResult)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_AllocationResult_To_counter_AllocationResult(a.(*v1alpha1.AllocationResult), b.(*counter.AllocationResult), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*counter.AllocationResult)(nil), (*v1alpha1.AllocationResult)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_counter_AllocationResult_To_v1alpha1_AllocationResult(a.(*counter.AllocationResult), b.(*v1alpha1.AllocationResult), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.Capacity)(nil), (*counter.Capacity)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Capacity_To_counter_Capacity(a.(*v1alpha1.Capacity), b.(*counter.Capacity), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*counter.Capacity)(nil), (*v1alpha1.Capacity)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_counter_Capacity_To_v1alpha1_Capacity(a.(*counter.Capacity), b.(*v1alpha1.Capacity), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.Parameters)(nil), (*counter.Parameters)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Parameters_To_counter_Parameters(a.(*v1alpha1.Parameters), b.(*counter.Parameters), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*counter.Parameters)(nil), (*v1alpha1.Parameters)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_counter_Parameters_To_v1alpha1_Parameters(a.(*counter.Parameters), b.(*v1alpha1.Parameters), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_AllocationResult_To_counter_AllocationResult(in *v1alpha1.AllocationResult, out *counter.AllocationResult, s conversion.Scope) error {
	out.ClassParameters = in.ClassParameters
	out.ClaimParameters = in.ClaimParameters
	out.NodeName = in.NodeName
	out.DriverName = in.DriverName
	out.InstanceID = types.UID(in.InstanceID)
	out.Count = in.Count
	return nil
}

// Convert_v1alpha1_AllocationResult_To_counter_AllocationResult is an autogenerated conversion function.
func Convert_v1alpha1_AllocationResult_To_counter_AllocationResult(in *v1alpha1.AllocationResult, out *counter.AllocationResult, s conversion.Scope) error {
	return autoConvert_v1alpha1_AllocationResult_To_counter_AllocationResult(in, out, s)
}

func autoConvert_counter_AllocationResult_To_v1alpha1_AllocationResult(in *counter.AllocationResult, out *v1alpha1.AllocationResult, s conversion.Scope) error {
	out.ClassParameters = in.ClassParameters
	out.ClaimParameters = in.ClaimParameters
	out.NodeName = in.NodeName
	out.DriverName = in.DriverName
	out.InstanceID = types.UID(in.InstanceID)
	out.Count = in.Count
	return nil
}

// Convert_counter_AllocationResult_To_v1alpha1_AllocationResult is an autogenerated conversion function.
func Convert_counter_AllocationResult_To_v1alpha1_AllocationResult(in *counter.AllocationResult, out *v1alpha1.AllocationResult, s conversion.Scope) error {
	return autoConvert_counter_AllocationResult_To_v1alpha1_AllocationResult(in, out, s)
}

func autoConvert_v1alpha1_Capacity_To_counter_Capacity(in *v1alpha1.Capacity, out *counter.Capacity, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Count = in.Count
	return nil
}

// Convert_v1alpha1_Capacity_To_counter_Capacity is an autogenerated conversion function.
func Convert_v1alpha1_Capacity_To_counter_Capacity(in *v1alpha1.Capacity, out *counter.Capacity, s conversion.Scope) error {
	return autoConvert_v1alpha1_Capacity_To_counter_Capacity(in, out, s)
}

func autoConvert_counter_Capacity_To_v1alpha1_Capacity(in *counter.Capacity, out *v1alpha1.Capacity, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Count = in.Count
	return nil
}

// Convert_counter_Capacity_To_v1alpha1_Capacity is an autogenerated conversion function.
func Convert_counter_Capacity_To_v1alpha1_Capacity(in *counter.Capacity, out *v1alpha1.Capacity, s conversion.Scope) error {
	return autoConvert_counter_Capacity_To_v1alpha1_Capacity(in, out, s)
}

func autoConvert_v1alpha1_Parameters_To_counter_Parameters(in *v1alpha1.Parameters, out *counter.Parameters, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Count = in.Count
	out.Selector = in.Selector
	return nil
}

// Convert_v1alpha1_Parameters_To_counter_Parameters is an autogenerated conversion function.
func Convert_v1alpha1_Parameters_To_counter_Parameters(in *v1alpha1.Parameters, out *counter.Parameters, s conversion.Scope) error {
	return autoConvert_v1alpha1_Parameters_To_counter_Parameters(in, out, s)
}

func autoConvert_counter_Parameters_To_v1alpha1_Parameters(in *counter.Parameters, out *v1alpha1.Parameters, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	out.Count = in.Count
	out.Selector = in.Selector
	return nil
}

// Convert_counter_Parameters_To_v1alpha1_Parameters is an autogenerated conversion function.
func Convert_counter_Parameters_To_v1alpha1_Parameters(in *counter.Parameters, out *v1alpha1.Parameters, s conversion.Scope) error {
	return autoConvert_counter_Parameters_To_v1alpha1_Parameters(in, out, s)
}
