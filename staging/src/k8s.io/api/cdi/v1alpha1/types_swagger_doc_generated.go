/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_AllocationResult = map[string]string{
	"":                 "AllocationResult contains attributed of an allocated resource.",
	"attributes":       "Attributes contains arbitrary data returned by the driver after a successful allocation.  This data is passed to the driver for all operations involving the allocated resource. This is opaque for Kubernetes.  Driver documentation may explain to users how to interpret this data if needed.\n\nThe attributes must be sufficient to deallocate the resource because the ResourceClass might not be available anymore when deallocation starts.",
	"availableOnNodes": "This field will get set by the resource driver after it has allocated the resource driver to inform the scheduler where it can schedule Pods using the ResourceClaim.\n\nA resource driver may already set this before the resource is allocated. The scheduler will then check this field in addition to UnsuitableNodes to filter out nodes where the resource cannot be allocated.\n\nSetting this field is optional. If nil, the resource is available everywhere.",
	"userLimit":        "UserLimit determines how many entities are allowed to use this resource at the same time. The default is 1. -1 enables the usage by an unlimited number of users. Individual containers in a pod are not counted as users, only the Pod is.",
}

func (AllocationResult) SwaggerDoc() map[string]string {
	return map_AllocationResult
}

var map_DriverSchedulingStatus = map[string]string{
	"":                "DriverSchedulingStatus contains information provided by the resource driver while handling delayed allocation.",
	"suitableNodes":   "Only nodes matching the selector will be considered by the scheduler when trying to find a Node that fits a Pod. A resource driver can set this immediately when a ResourceClaim gets created and, for example, provide a static selector that uses labels.\n\nSetting this field is optional. If nil, all nodes are candidates.",
	"unsuitableNodes": "A change of the PotentialNodes field triggers a check in the driver on which of those nodes the resource might be made available. It then excludes nodes by listing those where that is not the case in UnsuitableNodes.\n\nUnsuitable nodes will be ignored by the scheduler when selecting a node for a Pod. All other nodes are potential candidates, either because no information is available yet or because allocation might succeed.\n\nThis can change, so the driver must refresh this information periodically and/or after changing resource allocation for some other ResourceClaim until a node gets selected by the scheduler.",
}

func (DriverSchedulingStatus) SwaggerDoc() map[string]string {
	return map_DriverSchedulingStatus
}

var map_ResourceClaim = map[string]string{
	"":         "ResourceClaim is created by users to describe which resources they need. Its status tracks whether the resource has been allocated and what the resulting attributes are.",
	"metadata": "The driver must set a finalizer here before it attempts to allocate the resource. It removes the finalizer again when a) the allocation attempt has definitely failed or b) when the allocated resource was freed. This ensures that resources are not leaked.\n\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"spec":     "Spec describes the desired attributes of a resource that then needs to be allocated. It can only be set once when creating the ResourceClaim.",
	"status":   "Status describes whether the resource is available and with which attributes.",
}

func (ResourceClaim) SwaggerDoc() map[string]string {
	return map_ResourceClaim
}

var map_ResourceClaimList = map[string]string{
	"":         "ResourceClaimList is a collection of resource classes.",
	"metadata": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "Items is the list of resource claims.",
}

func (ResourceClaimList) SwaggerDoc() map[string]string {
	return map_ResourceClaimList
}

var map_ResourceClaimStatus = map[string]string{
	"":            "ResourceClaimStatus tracks whether the resource has been allocated and what the resulting attributes are.",
	"phase":       "Phase explains what the current status of the claim is and determines which component needs to do something.",
	"driverName":  "DriverName is a copy of the driver name from the ResourceClass at the time when allocation started. It's necessary to support deallocation when the class gets deleted before a claim.",
	"scheduling":  "Scheduling contains information that is only relevant while the scheduler and the resource driver are in the process of selecting a node for a Pod and the allocation mode is AllocationModeDelayed. The resource driver should unset this when it has successfully allocated the resource.",
	"allocation":  "Allocation is set by the resource driver once a resource has been allocated succesfully.",
	"reservedFor": "ReservedFor indicates which entities are currently allowed to use the resource.  Usually those are Pods, but any other object that currently exists is also possible.\n\nA scheduler must add a Pod that it is scheduling. This must be done in an atomic ResourceClaim update because there might be multiple schedulers working on different Pods that compete for access to the same ResourceClaim.\n\nkubelet will check this before allowing a Pod to run because a scheduler might have missed that step, for example because it doesn't support dynamic resource allocation or the feature was disabled.",
	"usedOnNodes": "UsedOnNodes is a list of nodes where the ResourceClaim is or is going to be used. This must be set by the scheduler after scheduling a Pod onto a node.\n\nList/watch requests for ResourceClaims can filter on this field using a \"status.usedOnNodes.<entry>=1\" fieldSelector. kubelet uses this to limit which ResourceClaims it receives from the apiserver.",
}

func (ResourceClaimStatus) SwaggerDoc() map[string]string {
	return map_ResourceClaimStatus
}

var map_ResourceClass = map[string]string{
	"":           "ResourceClass is used by administrators to influence how resources are allocated.",
	"metadata":   "More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"driverName": "DriverName determines which resource driver is to be used for allocation of a ResourceClaim that uses this class.\n\nResource drivers have a unique name in reverse domain order (acme.example.com).",
	"parameters": "Parameters holds arbitrary values that will be available to the driver when allocating a resource that uses this class. The driver will be able to distinguish between parameters stored here and and those stored in ResourceClaimSpec. These parameters here can only be set by cluster administrators.",
}

func (ResourceClass) SwaggerDoc() map[string]string {
	return map_ResourceClass
}

var map_ResourceClassList = map[string]string{
	"":         "ResourceClassList is a collection of resource classes.",
	"metadata": "Standard list metadata More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
	"items":    "Items is the list of resource classes.",
}

func (ResourceClassList) SwaggerDoc() map[string]string {
	return map_ResourceClassList
}

var map_SchedulerSchedulingStatus = map[string]string{
	"":               "SchedulerSchedulingStatus contains information provided by the scheduler while handling delayed allocation.",
	"selectedNode":   "When allocation is delayed, the scheduler must set the node for which it wants the resource to be allocated before the driver proceeds with allocation.\n\nFor immediate allocation, the scheduler will not set this field. The resource driver controller may set it to trigger allocation on a specific node if the resources are local to nodes.\n\nList/watch requests for ResourceClaims can filter on this field using a \"status.scheduling.scheduler.selectedNode=NAME\" fieldSelector.",
	"potentialNodes": "When allocation is delayed, and the scheduler needs to decide on which node a Pod should run, it will ask the driver on which nodes the resource might be made available. To trigger that check, the scheduler provides the names of nodes which might be suitable for the Pod. Will be updated periodically until the claim is allocated.",
}

func (SchedulerSchedulingStatus) SwaggerDoc() map[string]string {
	return map_SchedulerSchedulingStatus
}

var map_SchedulingStatus = map[string]string{
	"":          "SchedulingStatus is used while handling delayed allocation.",
	"scheduler": "Scheduler contains information provided by the scheduler.",
	"driver":    "DriverStatus contains information provided by the resource driver.",
}

func (SchedulingStatus) SwaggerDoc() map[string]string {
	return map_SchedulingStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
